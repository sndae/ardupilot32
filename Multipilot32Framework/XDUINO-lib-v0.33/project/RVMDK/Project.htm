<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [C:\Documents and Settings\Roberto\Desktop\lavoro\SVN LNMultipilot\branches\Redfox74\Multipilot32Framework\XDUINO-lib-v0.33\project\RVMDK\Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image C:\Documents and Settings\Roberto\Desktop\lavoro\SVN LNMultipilot\branches\Redfox74\Multipilot32Framework\XDUINO-lib-v0.33\project\RVMDK\Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 728]: Last Updated: Wed Feb 09 17:24:44 2011
<BR><P>
<H3>Maximum Stack Usage =        400 bytes + Unknown(Functions without stacksize, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; loop() &rArr; doSerial::print(int) &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[17a993c]">__user_initial_stackheap</a>
 <LI><a href="#[fb6378]">__WFI</a>
 <LI><a href="#[fb63b4]">__WFE</a>
 <LI><a href="#[17a975c]">__SEV</a>
 <LI><a href="#[17a9720]">__ISB</a>
 <LI><a href="#[17a96e4]">__DSB</a>
 <LI><a href="#[17a96a8]">__DMB</a>
 <LI><a href="#[17a966c]">__SVC</a>
 <LI><a href="#[17a9630]">__MRS_CONTROL</a>
 <LI><a href="#[17a95f4]">__MSR_CONTROL</a>
 <LI><a href="#[17a95b8]">__MRS_PSP</a>
 <LI><a href="#[17a957c]">__MSR_PSP</a>
 <LI><a href="#[17a9540]">__MRS_MSP</a>
 <LI><a href="#[17a9504]">__MSR_MSP</a>
 <LI><a href="#[fb69cc]">__RESETPRIMASK</a>
 <LI><a href="#[fb6954]">__SETPRIMASK</a>
 <LI><a href="#[17a94c8]">__READ_PRIMASK</a>
 <LI><a href="#[fb6990]">__SETFAULTMASK</a>
 <LI><a href="#[fb6a08]">__RESETFAULTMASK</a>
 <LI><a href="#[17a948c]">__READ_FAULTMASK</a>
 <LI><a href="#[fb6a80]">__BASEPRICONFIG</a>
 <LI><a href="#[fb6a44]">__GetBASEPRI</a>
 <LI><a href="#[17a9450]">__REV_HalfWord</a>
 <LI><a href="#[17a9414]">__REV_Word</a>
</UL>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[17a9978]">Reset_Handler</a>
 <LI><a href="#[fc3050]">NMIException</a>
 <LI><a href="#[fc3014]">HardFaultException</a>
 <LI><a href="#[fc2fd8]">MemManageException</a>
 <LI><a href="#[fc2f9c]">BusFaultException</a>
 <LI><a href="#[fc2f60]">UsageFaultException</a>
 <LI><a href="#[fc2ee8]">SVCHandler</a>
 <LI><a href="#[fc2f24]">DebugMonitor</a>
 <LI><a href="#[fc2eac]">PendSVC</a>
 <LI><a href="#[fc2330]">SysTickHandler</a>
 <LI><a href="#[fc2e70]">WWDG_IRQHandler</a>
 <LI><a href="#[fc2e34]">PVD_IRQHandler</a>
 <LI><a href="#[fc2df8]">TAMPER_IRQHandler</a>
 <LI><a href="#[fc2dbc]">RTC_IRQHandler</a>
 <LI><a href="#[fc2d80]">FLASH_IRQHandler</a>
 <LI><a href="#[fc2d44]">RCC_IRQHandler</a>
 <LI><a href="#[fc21c8]">EXTI0_IRQHandler</a>
 <LI><a href="#[fc218c]">EXTI1_IRQHandler</a>
 <LI><a href="#[fc2150]">EXTI2_IRQHandler</a>
 <LI><a href="#[fc2114]">EXTI3_IRQHandler</a>
 <LI><a href="#[fc20d8]">EXTI4_IRQHandler</a>
 <LI><a href="#[fc2d08]">DMA1_Channel1_IRQHandler</a>
 <LI><a href="#[fc2ccc]">DMA1_Channel2_IRQHandler</a>
 <LI><a href="#[fc2c90]">DMA1_Channel3_IRQHandler</a>
 <LI><a href="#[fc2c54]">DMA1_Channel4_IRQHandler</a>
 <LI><a href="#[fc2c18]">DMA1_Channel5_IRQHandler</a>
 <LI><a href="#[fc2bdc]">DMA1_Channel6_IRQHandler</a>
 <LI><a href="#[fc2ba0]">DMA1_Channel7_IRQHandler</a>
 <LI><a href="#[fc2b64]">ADC1_2_IRQHandler</a>
 <LI><a href="#[fc2b28]">USB_HP_CAN_TX_IRQHandler</a>
 <LI><a href="#[fc2aec]">USB_LP_CAN_RX0_IRQHandler</a>
 <LI><a href="#[fc2ab0]">CAN_RX1_IRQHandler</a>
 <LI><a href="#[fc2a74]">CAN_SCE_IRQHandler</a>
 <LI><a href="#[fc209c]">EXTI9_5_IRQHandler</a>
 <LI><a href="#[fc2a38]">TIM1_BRK_IRQHandler</a>
 <LI><a href="#[fc29fc]">TIM1_UP_IRQHandler</a>
 <LI><a href="#[fc29c0]">TIM1_TRG_COM_IRQHandler</a>
 <LI><a href="#[fc2984]">TIM1_CC_IRQHandler</a>
 <LI><a href="#[fc2948]">TIM2_IRQHandler</a>
 <LI><a href="#[fc290c]">TIM3_IRQHandler</a>
 <LI><a href="#[fc28d0]">TIM4_IRQHandler</a>
 <LI><a href="#[fc2894]">I2C1_EV_IRQHandler</a>
 <LI><a href="#[fc2858]">I2C1_ER_IRQHandler</a>
 <LI><a href="#[fc281c]">I2C2_EV_IRQHandler</a>
 <LI><a href="#[fc27e0]">I2C2_ER_IRQHandler</a>
 <LI><a href="#[fc27a4]">SPI1_IRQHandler</a>
 <LI><a href="#[fc2768]">SPI2_IRQHandler</a>
 <LI><a href="#[fc22f4]">USART1_IRQHandler</a>
 <LI><a href="#[fc22b8]">USART2_IRQHandler</a>
 <LI><a href="#[fc227c]">USART3_IRQHandler</a>
 <LI><a href="#[fc2060]">EXTI15_10_IRQHandler</a>
 <LI><a href="#[fc272c]">RTCAlarm_IRQHandler</a>
 <LI><a href="#[fc26f0]">USBWakeUp_IRQHandler</a>
 <LI><a href="#[fc26b4]">TIM8_BRK_IRQHandler</a>
 <LI><a href="#[fc2678]">TIM8_UP_IRQHandler</a>
 <LI><a href="#[fc263c]">TIM8_TRG_COM_IRQHandler</a>
 <LI><a href="#[fc2600]">TIM8_CC_IRQHandler</a>
 <LI><a href="#[fc25c4]">ADC3_IRQHandler</a>
 <LI><a href="#[fc2588]">FSMC_IRQHandler</a>
 <LI><a href="#[fc254c]">SDIO_IRQHandler</a>
 <LI><a href="#[fc2510]">TIM5_IRQHandler</a>
 <LI><a href="#[fc24d4]">SPI3_IRQHandler</a>
 <LI><a href="#[fc2240]">UART4_IRQHandler</a>
 <LI><a href="#[fc2204]">UART5_IRQHandler</a>
 <LI><a href="#[fc2498]">TIM6_IRQHandler</a>
 <LI><a href="#[fc245c]">TIM7_IRQHandler</a>
 <LI><a href="#[fc2420]">DMA2_Channel1_IRQHandler</a>
 <LI><a href="#[fc23e4]">DMA2_Channel2_IRQHandler</a>
 <LI><a href="#[fc23a8]">DMA2_Channel3_IRQHandler</a>
 <LI><a href="#[fc236c]">DMA2_Channel4_5_IRQHandler</a>
 <LI><a href="#[184d390]">__main</a>
 <LI><a href="#[17a501c]">doSerial::~doSerial()</a>
 <LI><a href="#[19b7040]">_snputc</a>
 <LI><a href="#[19b7298]">_printf_input_char</a>
 <LI><a href="#[19af264]">_get_lc_ctype</a>
 <LI><a href="#[19ad6bc]">__default_terminate_handler()</a>
 <LI><a href="#[19ad1d0]">__I$use$semihosting</a>
 <LI><a href="#[19b464c]">__default_new_handler()</a>
 <LI><a href="#[17a4950]">__sti___14_xduinoInit_cpp</a>
 <LI><a href="#[1851f08]">__sti___10_APM_RC_cpp</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[184d390]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[1849088]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[19aa494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[19aa494]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[184d390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[19aa458]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1849088]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[19aa41c]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[19aa3e0]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[19aa23c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[184dfc0]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1849484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[184dcf0]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[184e560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[184df0c]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1849484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[184de58]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1849484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[184dda4]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1849358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[184e1dc]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[18503d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[184e128]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[18503d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[184e074]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[18503d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[184e2cc]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[184ff28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[184e3bc]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[184f988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[19b6b90]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[184e4ac]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[19b6f14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[184dc00]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[19b6d70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[19b6c44]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[19ae418]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[19ac3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[19b3134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[19b5f60]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[19b257c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[19b5eac]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[19b5df8]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[184d930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[19b5e34]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[19b5d80]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000B))
<BR><BR>[Calls]<UL><LI><a href="#[19b2888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[19b5dbc]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[19b5d08]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[19b5ccc]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[19af264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[19b5c90]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[19b5c18]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[19b5bdc]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[19b0d58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[19b5678]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[19b56f0]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[19b5ab0]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[19b5948]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[19b55c4]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002D))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[184cf1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[19b5600]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[19b59c0]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[19b58d0]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[19b5ba0]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[19b5b28]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[19b5a38]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[19b5858]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[19b5588]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[19b554c]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[19aaf98]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[19ac168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
<LI><a href="#[19aef94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[19b4dcc]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_1 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[19b3ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[19b4ca0]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[19b4ac0]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[19b4a84]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[19b4bec]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[19b4d54]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[19b4b74]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[1849088]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[184d390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[19aa458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[19b31e8]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[19b2e64]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[19afa5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[19b3134]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_li &rArr; __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[19ae418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[19b3170]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[19b3080]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; loop() &rArr; doSerial::print(int) &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fbe334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[19af0fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[19b30bc]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[19ad0e0]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[19af0fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[19ac168]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[19aaf98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[19ac1a4]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[19ac12c]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[19ad2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[fc3050]"></a>NMIException</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[19af78c]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[fc3014]"></a>HardFaultException</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc2fd8]"></a>MemManageException</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc2f9c]"></a>BusFaultException</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc2f60]"></a>UsageFaultException</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc2f24]"></a>DebugMonitor</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc2ee8]"></a>SVCHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc2eac]"></a>PendSVC</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc2e70]"></a>WWDG_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc2e34]"></a>PVD_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc2df8]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc2dbc]"></a>RTC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc2d80]"></a>FLASH_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc2d44]"></a>RCC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc2d08]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc2ccc]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc2c90]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc2c54]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc2c18]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc2bdc]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc2ba0]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc2b64]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc2b28]"></a>USB_HP_CAN_TX_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc2aec]"></a>USB_LP_CAN_RX0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc2ab0]"></a>CAN_RX1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc2a74]"></a>CAN_SCE_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc2a38]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc29fc]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc29c0]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc2984]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc2948]"></a>TIM2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc290c]"></a>TIM3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc28d0]"></a>TIM4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc2894]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc2858]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc281c]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc27e0]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc27a4]"></a>SPI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc2768]"></a>SPI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc272c]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc26f0]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc26b4]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc2678]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc263c]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc2600]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc25c4]"></a>ADC3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc2588]"></a>FSMC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc254c]"></a>SDIO_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc2510]"></a>TIM5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc24d4]"></a>SPI3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc2498]"></a>TIM6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc245c]"></a>TIM7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc2420]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc23e4]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc23a8]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc236c]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc2330]"></a>SysTickHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTickHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[fc1fe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_IRQ_Function
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc22f4]"></a>USART1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART1_IRQHandler &rArr; USART1_IRQ_Function &rArr; UxARTx_IRQ_Function(USART_TypeDef*, doSerial*) &rArr; RoundRobinData&lang;char&rang;::Put(char) &rArr; RoundRobinData&lang;char&rang;::Next(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc1f34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQ_Function
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc22b8]"></a>USART2_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART2_IRQHandler &rArr; USART2_IRQ_Function &rArr; UxARTx_IRQ_Function(USART_TypeDef*, doSerial*) &rArr; RoundRobinData&lang;char&rang;::Put(char) &rArr; RoundRobinData&lang;char&rang;::Next(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc1ef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQ_Function
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc227c]"></a>USART3_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART3_IRQHandler &rArr; USART3_IRQ_Function &rArr; UxARTx_IRQ_Function(USART_TypeDef*, doSerial*) &rArr; RoundRobinData&lang;char&rang;::Put(char) &rArr; RoundRobinData&lang;char&rang;::Next(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc1ebc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQ_Function
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc2240]"></a>UART4_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART4_IRQHandler &rArr; UART4_IRQ_Function &rArr; UxARTx_IRQ_Function(USART_TypeDef*, doSerial*) &rArr; RoundRobinData&lang;char&rang;::Put(char) &rArr; RoundRobinData&lang;char&rang;::Next(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc1fac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQ_Function
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc2204]"></a>UART5_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART5_IRQHandler &rArr; UART5_IRQ_Function &rArr; UxARTx_IRQ_Function(USART_TypeDef*, doSerial*) &rArr; RoundRobinData&lang;char&rang;::Put(char) &rArr; RoundRobinData&lang;char&rang;::Next(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc1f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQ_Function
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc21c8]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI0_IRQHandler &rArr; EXTI_ALL_IRQ_Function
</UL>
<BR>[Calls]<UL><LI><a href="#[fc2024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ALL_IRQ_Function
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc218c]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI1_IRQHandler &rArr; EXTI_ALL_IRQ_Function
</UL>
<BR>[Calls]<UL><LI><a href="#[fc2024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ALL_IRQ_Function
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc2150]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI2_IRQHandler &rArr; EXTI_ALL_IRQ_Function
</UL>
<BR>[Calls]<UL><LI><a href="#[fc2024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ALL_IRQ_Function
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc2114]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI3_IRQHandler &rArr; EXTI_ALL_IRQ_Function
</UL>
<BR>[Calls]<UL><LI><a href="#[fc2024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ALL_IRQ_Function
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc20d8]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI4_IRQHandler &rArr; EXTI_ALL_IRQ_Function
</UL>
<BR>[Calls]<UL><LI><a href="#[fc2024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ALL_IRQ_Function
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc209c]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI9_5_IRQHandler &rArr; EXTI_ALL_IRQ_Function
</UL>
<BR>[Calls]<UL><LI><a href="#[fc2024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ALL_IRQ_Function
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc2060]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI15_10_IRQHandler &rArr; EXTI_ALL_IRQ_Function
</UL>
<BR>[Calls]<UL><LI><a href="#[fc2024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ALL_IRQ_Function
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[fc1fe8]"></a>SysTick_IRQ_Function</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fc2330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickHandler
</UL>

<P><STRONG><a name="[fc1f34]"></a>USART1_IRQ_Function</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART1_IRQ_Function &rArr; UxARTx_IRQ_Function(USART_TypeDef*, doSerial*) &rArr; RoundRobinData&lang;char&rang;::Put(char) &rArr; RoundRobinData&lang;char&rang;::Next(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[fbe2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UxARTx_IRQ_Function(USART_TypeDef*, doSerial*)
</UL>
<BR>[Called By]<UL><LI><a href="#[fc22f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[fc1ef8]"></a>USART2_IRQ_Function</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART2_IRQ_Function &rArr; UxARTx_IRQ_Function(USART_TypeDef*, doSerial*) &rArr; RoundRobinData&lang;char&rang;::Put(char) &rArr; RoundRobinData&lang;char&rang;::Next(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[fbe2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UxARTx_IRQ_Function(USART_TypeDef*, doSerial*)
</UL>
<BR>[Called By]<UL><LI><a href="#[fc22b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[fc1ebc]"></a>USART3_IRQ_Function</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART3_IRQ_Function &rArr; UxARTx_IRQ_Function(USART_TypeDef*, doSerial*) &rArr; RoundRobinData&lang;char&rang;::Put(char) &rArr; RoundRobinData&lang;char&rang;::Next(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[fbe2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UxARTx_IRQ_Function(USART_TypeDef*, doSerial*)
</UL>
<BR>[Called By]<UL><LI><a href="#[fc227c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[fc1fac]"></a>UART4_IRQ_Function</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART4_IRQ_Function &rArr; UxARTx_IRQ_Function(USART_TypeDef*, doSerial*) &rArr; RoundRobinData&lang;char&rang;::Put(char) &rArr; RoundRobinData&lang;char&rang;::Next(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[fbe2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UxARTx_IRQ_Function(USART_TypeDef*, doSerial*)
</UL>
<BR>[Called By]<UL><LI><a href="#[fc2240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[fc1f70]"></a>UART5_IRQ_Function</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART5_IRQ_Function &rArr; UxARTx_IRQ_Function(USART_TypeDef*, doSerial*) &rArr; RoundRobinData&lang;char&rang;::Put(char) &rArr; RoundRobinData&lang;char&rang;::Next(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[fbe2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UxARTx_IRQ_Function(USART_TypeDef*, doSerial*)
</UL>
<BR>[Called By]<UL><LI><a href="#[fc2204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[fc2024]"></a>EXTI_ALL_IRQ_Function</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI_ALL_IRQ_Function
</UL>
<BR>[Calls]<UL><LI><a href="#[fbe118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[fbe154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[fc2060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[fc209c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[fc20d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[fc2114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[fc2150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[fc218c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[fc21c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[fbe424]"></a>InterruptPB9()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fbde48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::digitalRead(unsigned char)
<LI><a href="#[fbe1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::printf&lang;bool&rang;(char*, T1)
</UL>

<P><STRONG><a name="[fbe3e8]"></a>InterruptPB8()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fbde48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::digitalRead(unsigned char)
<LI><a href="#[fbe1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::printf&lang;bool&rang;(char*, T1)
</UL>

<P><STRONG><a name="[fbe3ac]"></a>setup()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = setup() &rArr; doSerial::begin(const unsigned long&) &rArr; defineName::getUxART(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[fbdd94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::print(const char*)
<LI><a href="#[fbddd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::begin(const unsigned long&)
<LI><a href="#[fbde0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::delay(unsigned long)
<LI><a href="#[fbdf38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APM_RC_Class::Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[fbe334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fbe370]"></a>loop()</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = loop() &rArr; doSerial::print(int) &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fbdd1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::print(int)
<LI><a href="#[fbdd94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::print(const char*)
<LI><a href="#[fbde84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APM_RC_Class::OutputCh(unsigned char, unsigned short)
<LI><a href="#[fbdec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APM_RC_Class::GetState()
<LI><a href="#[fbdefc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APM_RC_Class::InputCh(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[fbe334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fbe334]"></a>main</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = main &rArr; loop() &rArr; doSerial::print(int) &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fbdf74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit()
<LI><a href="#[fbe370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
<LI><a href="#[fbe3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>
<BR>[Called By]<UL><LI><a href="#[19b3080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[fbd4ac]"></a>ADC_DeInit</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[fbcc3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[17a74ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doADC::Setup(ADC_TypeDef*)
</UL>

<P><STRONG><a name="[fbd470]"></a>ADC_Init</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17a74ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doADC::Setup(ADC_TypeDef*)
</UL>

<P><STRONG><a name="[fbd434]"></a>ADC_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[fbd3f8]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a74ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doADC::Setup(ADC_TypeDef*)
</UL>

<P><STRONG><a name="[fbd3bc]"></a>ADC_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[fbd380]"></a>ADC_ITConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[fbd344]"></a>ADC_ResetCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a74ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doADC::Setup(ADC_TypeDef*)
</UL>

<P><STRONG><a name="[fbd308]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a74ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doADC::Setup(ADC_TypeDef*)
</UL>

<P><STRONG><a name="[fbd2cc]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a74ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doADC::Setup(ADC_TypeDef*)
</UL>

<P><STRONG><a name="[fbd290]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a74ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doADC::Setup(ADC_TypeDef*)
</UL>

<P><STRONG><a name="[fbd254]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17a7434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doADC::Read(unsigned char)
</UL>

<P><STRONG><a name="[fbd218]"></a>ADC_GetSoftwareStartConvStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[fbd1dc]"></a>ADC_DiscModeChannelCountConfig</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[fbd1a0]"></a>ADC_DiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[fbd164]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 180 bytes, Stack size 20 bytes, stm32f10x_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17a7434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doADC::Read(unsigned char)
</UL>

<P><STRONG><a name="[fbd128]"></a>ADC_ExternalTrigConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[fbd0ec]"></a>ADC_GetConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17a7434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doADC::Read(unsigned char)
</UL>

<P><STRONG><a name="[fbd0b0]"></a>ADC_GetDualModeConversionValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[fbd074]"></a>ADC_AutoInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[fbd038]"></a>ADC_InjectedDiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[fbcffc]"></a>ADC_ExternalTrigInjectedConvConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[fbcfc0]"></a>ADC_ExternalTrigInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[fbcf84]"></a>ADC_SoftwareStartInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[fbcf48]"></a>ADC_GetSoftwareStartInjectedConvCmdStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[fbcf0c]"></a>ADC_InjectedChannelConfig</STRONG> (Thumb, 126 bytes, Stack size 20 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[fbced0]"></a>ADC_InjectedSequencerLengthConfig</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[fbce94]"></a>ADC_SetInjectedOffset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[fbce58]"></a>ADC_GetInjectedConversionValue</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[fbce1c]"></a>ADC_AnalogWatchdogCmd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[fbcde0]"></a>ADC_AnalogWatchdogThresholdsConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[fbcda4]"></a>ADC_AnalogWatchdogSingleChannelConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[fbcd68]"></a>ADC_TempSensorVrefintCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a7470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doADC::StartTemperatureSensor()
</UL>

<P><STRONG><a name="[fbcd2c]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17a7434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doADC::Read(unsigned char)
</UL>

<P><STRONG><a name="[fbccf0]"></a>ADC_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[fbccb4]"></a>ADC_GetITStatus</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[fbcc78]"></a>ADC_ClearITPendingBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[fbb418]"></a>DAC_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_dac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DAC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[fbbe2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[fbdf74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit()
</UL>

<P><STRONG><a name="[fbb3dc]"></a>DAC_Init</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32f10x_dac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DAC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17a82f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doDAC::Setup(unsigned long)
</UL>

<P><STRONG><a name="[fbb3a0]"></a>DAC_StructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_dac.o(.text), UNUSED)

<P><STRONG><a name="[fbb364]"></a>DAC_Cmd</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_dac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a82f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doDAC::Setup(unsigned long)
</UL>

<P><STRONG><a name="[fbb328]"></a>DAC_DMACmd</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_dac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a82f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doDAC::Setup(unsigned long)
</UL>

<P><STRONG><a name="[fbb2ec]"></a>DAC_SoftwareTriggerCmd</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_dac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DAC_SoftwareTriggerCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[17a82f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doDAC::Setup(unsigned long)
</UL>

<P><STRONG><a name="[fbb2b0]"></a>DAC_DualSoftwareTriggerCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_dac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a82f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doDAC::Setup(unsigned long)
</UL>

<P><STRONG><a name="[fbb274]"></a>DAC_WaveGenerationCmd</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f10x_dac.o(.text), UNUSED)

<P><STRONG><a name="[fbb238]"></a>DAC_SetChannel1Data</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_dac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a82bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doDAC::Write(unsigned short)
</UL>

<P><STRONG><a name="[fbb1fc]"></a>DAC_SetChannel2Data</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_dac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a82bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doDAC::Write(unsigned short)
</UL>

<P><STRONG><a name="[fbb1c0]"></a>DAC_SetDualChannelData</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f10x_dac.o(.text), UNUSED)

<P><STRONG><a name="[fbb184]"></a>DAC_GetDataOutputValue</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_dac.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17a8280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doDAC::LastWrite()
</UL>

<P><STRONG><a name="[fba374]"></a>EXTI_DeInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[fba338]"></a>EXTI_Init</STRONG> (Thumb, 188 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a6de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doEXTI::Enable()
</UL>

<P><STRONG><a name="[fba2fc]"></a>EXTI_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[fba2c0]"></a>EXTI_GenerateSWInterrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[fba284]"></a>EXTI_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[fba248]"></a>EXTI_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[fbe118]"></a>EXTI_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fc2024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ALL_IRQ_Function
</UL>

<P><STRONG><a name="[fbe154]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fc2024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ALL_IRQ_Function
</UL>

<P><STRONG><a name="[fb9e88]"></a>FLASH_SetLatency</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a3a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration()
</UL>

<P><STRONG><a name="[fb9e4c]"></a>FLASH_HalfCycleAccessCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[fb9e10]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a3a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration()
</UL>

<P><STRONG><a name="[fb9dd4]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[fb9d98]"></a>FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[fb9d5c]"></a>FLASH_GetStatus</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fb9d20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[fb9d20]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb9d5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
<LI><a href="#[fb9fb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[fb9b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_UserOptionByteConfig
<LI><a href="#[fb9b40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadOutProtection
<LI><a href="#[fb9b7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EnableWriteProtection
<LI><a href="#[fb9bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramOptionByteData
<LI><a href="#[fb9bf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[fb9c30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[fb9c6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOptionBytes
<LI><a href="#[fb9ca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllPages
<LI><a href="#[fb9ce4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[fb9ce4]"></a>FLASH_ErasePage</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb9d20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[fb9ca8]"></a>FLASH_EraseAllPages</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb9d20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[fb9c6c]"></a>FLASH_EraseOptionBytes</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb9d20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[fb9c30]"></a>FLASH_ProgramWord</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb9d20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[fb9bf4]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb9d20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[fb9bb8]"></a>FLASH_ProgramOptionByteData</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb9d20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[fb9b7c]"></a>FLASH_EnableWriteProtection</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb9d20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[fb9b40]"></a>FLASH_ReadOutProtection</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb9d20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[fb9b04]"></a>FLASH_UserOptionByteConfig</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb9d20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[fb9ac8]"></a>FLASH_GetUserOptionByte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[fb9a8c]"></a>FLASH_GetWriteProtectionOptionByte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[fb9a50]"></a>FLASH_GetReadOutProtectionStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[fb9a14]"></a>FLASH_GetPrefetchBufferStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[fb99d8]"></a>FLASH_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[fb999c]"></a>FLASH_GetFlagStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[fb9960]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[fb8d30]"></a>GPIO_DeInit</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fbcc3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[fb8cf4]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fbcc3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[fb8cb8]"></a>GPIO_Init</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17a8244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doGPIO::doGPIO(GPIO_TypeDef*, unsigned short, GPIOMode_TypeDef)
</UL>

<P><STRONG><a name="[fb8c7c]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[fb8c40]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[fb8c04]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[fb8bc8]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[fb8b8c]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[fb8b50]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[fb8b14]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[fb8ad8]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[fb8a9c]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[fb8a60]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[fb8a24]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[fb89e8]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[fb89ac]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[fb8970]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[17a6de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doEXTI::Enable()
</UL>

<P><STRONG><a name="[fb7188]"></a>NVIC_DeInit</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[fb714c]"></a>NVIC_SCBDeInit</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[fb7110]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a39d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init_Interrupt()
</UL>

<P><STRONG><a name="[fb70d4]"></a>NVIC_Init</STRONG> (Thumb, 190 bytes, Stack size 20 bytes, stm32f10x_nvic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17a39d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init_Interrupt()
</UL>

<P><STRONG><a name="[fb7098]"></a>NVIC_StructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[fb705c]"></a>NVIC_SETPRIMASK</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_nvic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb6954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SETPRIMASK
</UL>

<P><STRONG><a name="[fb7020]"></a>NVIC_RESETPRIMASK</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_nvic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb69cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RESETPRIMASK
</UL>

<P><STRONG><a name="[fb6fe4]"></a>NVIC_SETFAULTMASK</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_nvic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb6990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SETFAULTMASK
</UL>

<P><STRONG><a name="[fb6fa8]"></a>NVIC_RESETFAULTMASK</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_nvic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb6a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RESETFAULTMASK
</UL>

<P><STRONG><a name="[fb6f6c]"></a>NVIC_BASEPRICONFIG</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f10x_nvic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb6a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BASEPRICONFIG
</UL>

<P><STRONG><a name="[fb6f30]"></a>NVIC_GetBASEPRI</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_nvic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb6a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GetBASEPRI
</UL>

<P><STRONG><a name="[fb6ef4]"></a>NVIC_GetCurrentPendingIRQChannel</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[fb6eb8]"></a>NVIC_GetIRQChannelPendingBitStatus</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[fb6e7c]"></a>NVIC_SetIRQChannelPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[fb6e40]"></a>NVIC_ClearIRQChannelPendingBit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[fb6e04]"></a>NVIC_GetCurrentActiveHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[fb6dc8]"></a>NVIC_GetIRQChannelActiveBitStatus</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[fb6d8c]"></a>NVIC_GetCPUID</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[fb6d50]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a3a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration()
</UL>

<P><STRONG><a name="[fb6d14]"></a>NVIC_GenerateSystemReset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[fb6cd8]"></a>NVIC_GenerateCoreReset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[fb6c9c]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[fb6c60]"></a>NVIC_SystemHandlerConfig</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[fb6c24]"></a>NVIC_SystemHandlerPriorityConfig</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[fb6be8]"></a>NVIC_GetSystemHandlerPendingBitStatus</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[fb6bac]"></a>NVIC_SetSystemHandlerPendingBit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[fb6b70]"></a>NVIC_ClearSystemHandlerPendingBit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[fb6b34]"></a>NVIC_GetSystemHandlerActiveBitStatus</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[fb6af8]"></a>NVIC_GetFaultHandlerSources</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[fb6abc]"></a>NVIC_GetFaultAddress</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[17ae8b0]"></a>RCC_DeInit</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a3a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration()
</UL>

<P><STRONG><a name="[17ae874]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a3a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration()
</UL>

<P><STRONG><a name="[17ae838]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[17a3a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration()
<LI><a href="#[17ae7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[17ae7fc]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_WaitForHSEStartUp &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[17ae838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[17a3a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration()
</UL>

<P><STRONG><a name="[17ae7c0]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17ae784]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17ae748]"></a>RCC_PLLConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a3a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration()
</UL>

<P><STRONG><a name="[17ae70c]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a3a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration()
</UL>

<P><STRONG><a name="[17ae6d0]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a3a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration()
</UL>

<P><STRONG><a name="[17ae694]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a3a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration()
</UL>

<P><STRONG><a name="[17ae658]"></a>RCC_HCLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a3a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration()
</UL>

<P><STRONG><a name="[17ae61c]"></a>RCC_PCLK1Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a3a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration()
</UL>

<P><STRONG><a name="[17ae5e0]"></a>RCC_PCLK2Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a3a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration()
</UL>

<P><STRONG><a name="[17ae5a4]"></a>RCC_ITConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17ae568]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17ae52c]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fbdf74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit()
<LI><a href="#[17a74ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doADC::Setup(ADC_TypeDef*)
</UL>

<P><STRONG><a name="[17ae4f0]"></a>RCC_LSEConfig</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17ae4b4]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17ae478]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17ae43c]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[fb7e6c]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 194 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[17aa7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[17ae400]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17ae3c4]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fbddd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::begin(const unsigned long&)
<LI><a href="#[fbdf74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit()
</UL>

<P><STRONG><a name="[17ae388]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fbddd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::begin(const unsigned long&)
<LI><a href="#[17a82f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doDAC::Setup(unsigned long)
</UL>

<P><STRONG><a name="[fbcc3c]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb8cf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[fb8d30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
<LI><a href="#[fbd4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[17aa800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[fbbe2c]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fbb418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_DeInit
<LI><a href="#[17aa800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[fbc5e8]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17ae34c]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17ae310]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17ae2d4]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17ae298]"></a>RCC_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17ae25c]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17ac54c]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f10x_systick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a3a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init()
</UL>

<P><STRONG><a name="[17ac510]"></a>SysTick_SetReload</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_systick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a3a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init()
</UL>

<P><STRONG><a name="[17ac4d4]"></a>SysTick_CounterCmd</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f10x_systick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a3a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init()
</UL>

<P><STRONG><a name="[17ac498]"></a>SysTick_ITConfig</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f10x_systick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a3a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init()
</UL>

<P><STRONG><a name="[17ac45c]"></a>SysTick_GetCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_systick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a78e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemUptime_uS()
<LI><a href="#[17a7920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemUptime_mS()
<LI><a href="#[17a79d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_uS(unsigned long)
<LI><a href="#[17a7a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_mS(unsigned long)
</UL>

<P><STRONG><a name="[17ac420]"></a>SysTick_GetFlagStatus</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f10x_systick.o(.text), UNUSED)

<P><STRONG><a name="[17aa800]"></a>USART_DeInit</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fbbe2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[fbcc3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[17aa7c4]"></a>USART_Init</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[fb7e6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[fbddd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::begin(const unsigned long&)
</UL>

<P><STRONG><a name="[17aa788]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[17aa74c]"></a>USART_ClockInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[17aa710]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[17aa6d4]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fbddd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::begin(const unsigned long&)
</UL>

<P><STRONG><a name="[17aa698]"></a>USART_ITConfig</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fbddd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::begin(const unsigned long&)
</UL>

<P><STRONG><a name="[17aa65c]"></a>USART_DMACmd</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[17aa620]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[17aa5e4]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[17aa5a8]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[17aa56c]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[17aa530]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[17aa4f4]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[17aa4b8]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[17aa47c]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[17aa440]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[17aa404]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[17aa3c8]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[17aa38c]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[17aa350]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[17aa314]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[17aa2d8]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[17aa29c]"></a>USART_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[17aa260]"></a>USART_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[17aa224]"></a>USART_GetITStatus</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[17aa1e8]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[17a9978]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_vector.o(.text))

<P><STRONG><a name="[17a993c]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, stm32f10x_vector.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19afa5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[fb6378]"></a>__WFI</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)

<P><STRONG><a name="[fb63b4]"></a>__WFE</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)

<P><STRONG><a name="[17a975c]"></a>__SEV</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)

<P><STRONG><a name="[17a9720]"></a>__ISB</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)

<P><STRONG><a name="[17a96e4]"></a>__DSB</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)

<P><STRONG><a name="[17a96a8]"></a>__DMB</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)

<P><STRONG><a name="[17a966c]"></a>__SVC</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)

<P><STRONG><a name="[17a9630]"></a>__MRS_CONTROL</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)

<P><STRONG><a name="[17a95f4]"></a>__MSR_CONTROL</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)

<P><STRONG><a name="[17a95b8]"></a>__MRS_PSP</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)

<P><STRONG><a name="[17a957c]"></a>__MSR_PSP</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)

<P><STRONG><a name="[17a9540]"></a>__MRS_MSP</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)

<P><STRONG><a name="[17a9504]"></a>__MSR_MSP</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)

<P><STRONG><a name="[fb69cc]"></a>__RESETPRIMASK</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fb7020]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_RESETPRIMASK
</UL>

<P><STRONG><a name="[fb6954]"></a>__SETPRIMASK</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fb705c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SETPRIMASK
</UL>

<P><STRONG><a name="[17a94c8]"></a>__READ_PRIMASK</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)

<P><STRONG><a name="[fb6990]"></a>__SETFAULTMASK</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fb6fe4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SETFAULTMASK
</UL>

<P><STRONG><a name="[fb6a08]"></a>__RESETFAULTMASK</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fb6fa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_RESETFAULTMASK
</UL>

<P><STRONG><a name="[17a948c]"></a>__READ_FAULTMASK</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)

<P><STRONG><a name="[fb6a80]"></a>__BASEPRICONFIG</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fb6f6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_BASEPRICONFIG
</UL>

<P><STRONG><a name="[fb6a44]"></a>__GetBASEPRI</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fb6f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_GetBASEPRI
</UL>

<P><STRONG><a name="[17a9450]"></a>__REV_HalfWord</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)

<P><STRONG><a name="[17a9414]"></a>__REV_Word</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)

<P><STRONG><a name="[17a87e4]"></a>defineName::getPin(unsigned char)</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, definename.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fbde48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::digitalRead(unsigned char)
<LI><a href="#[17a678c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::digitalToggle(unsigned char)
<LI><a href="#[17a67c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::digitalWrite(unsigned char, bool)
<LI><a href="#[17a6804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::pinMode(unsigned char, GPIOMode_TypeDef)
<LI><a href="#[17a6da4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doEXTI::Disable()
<LI><a href="#[17a6de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doEXTI::Enable()
<LI><a href="#[17a6e1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doEXTI::setIRQHandler(void(*)())
<LI><a href="#[17a7ec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doGPIO::doGPIO(unsigned char, GPIOMode_TypeDef)
<LI><a href="#[17a8730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defineName::getUxART(unsigned char)
<LI><a href="#[17a876c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defineName::getDACchannel(unsigned char)
<LI><a href="#[17a87a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defineName::getADCchannel(unsigned char)
</UL>

<P><STRONG><a name="[17a87a8]"></a>defineName::getADCchannel(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, definename.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17a87e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defineName::getPin(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[17a7434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doADC::Read(unsigned char)
</UL>

<P><STRONG><a name="[17a876c]"></a>defineName::getDACchannel(unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, definename.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = defineName::getDACchannel(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a87e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defineName::getPin(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[17a8280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doDAC::LastWrite()
<LI><a href="#[17a82bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doDAC::Write(unsigned short)
</UL>

<P><STRONG><a name="[17a8730]"></a>defineName::getUxART(unsigned char)</STRONG> (Thumb, 88 bytes, Stack size 76 bytes, definename.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = defineName::getUxART(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a87e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defineName::getPin(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[fbddd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::begin(const unsigned long&)
</UL>

<P><STRONG><a name="[17a83e8]"></a>doDAC::doDAC()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dodac.o(.text), UNUSED)

<P><STRONG><a name="[17a83ac]"></a>doDAC::doDAC__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dodac.o(.text), UNUSED)

<P><STRONG><a name="[17a8370]"></a>doDAC::doDAC(unsigned char)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dodac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a66d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::analogLastWrite(unsigned char)
<LI><a href="#[17a6714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::analogWrite(unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[17a8334]"></a>doDAC::doDAC__sub_object(unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dodac.o(.text), UNUSED)

<P><STRONG><a name="[17a82f8]"></a>doDAC::Setup(unsigned long)</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, dodac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = doDAC::Setup(unsigned long) &rArr; DAC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fbb2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_DualSoftwareTriggerCmd
<LI><a href="#[fbb2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SoftwareTriggerCmd
<LI><a href="#[fbb328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_DMACmd
<LI><a href="#[fbb364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Cmd
<LI><a href="#[fbb3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
<LI><a href="#[17ae388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[fbdf74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit()
</UL>

<P><STRONG><a name="[17a82bc]"></a>doDAC::Write(unsigned short)</STRONG> (Thumb, 66 bytes, Stack size 96 bytes, dodac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = doDAC::Write(unsigned short) &rArr; doGPIO::doGPIO(GPIO_TypeDef*, unsigned short, GPIOMode_TypeDef) &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fbb1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetChannel2Data
<LI><a href="#[fbb238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetChannel1Data
<LI><a href="#[17a8244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doGPIO::doGPIO(GPIO_TypeDef*, unsigned short, GPIOMode_TypeDef)
<LI><a href="#[17a876c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defineName::getDACchannel(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[17a6714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::analogWrite(unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[17a8280]"></a>doDAC::LastWrite()</STRONG> (Thumb, 24 bytes, Stack size 72 bytes, dodac.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fbb184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_GetDataOutputValue
<LI><a href="#[17a876c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defineName::getDACchannel(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[17a66d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::analogLastWrite(unsigned char)
</UL>

<P><STRONG><a name="[17a8244]"></a>doGPIO::doGPIO(GPIO_TypeDef*, unsigned short, GPIOMode_TypeDef)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, dogpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = doGPIO::doGPIO(GPIO_TypeDef*, unsigned short, GPIOMode_TypeDef) &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fb8cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fbddd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::begin(const unsigned long&)
<LI><a href="#[17a6804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::pinMode(unsigned char, GPIOMode_TypeDef)
<LI><a href="#[17a7434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doADC::Read(unsigned char)
<LI><a href="#[17a7ec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doGPIO::doGPIO(unsigned char, GPIOMode_TypeDef)
<LI><a href="#[17a82bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doDAC::Write(unsigned short)
</UL>

<P><STRONG><a name="[17a7efc]"></a>doGPIO::doGPIO__sub_object(GPIO_TypeDef*, unsigned short, GPIOMode_TypeDef)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, dogpio.o(.text), UNUSED)

<P><STRONG><a name="[17a7ec0]"></a>doGPIO::doGPIO(unsigned char, GPIOMode_TypeDef)</STRONG> (Thumb, 40 bytes, Stack size 96 bytes, dogpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17a8244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doGPIO::doGPIO(GPIO_TypeDef*, unsigned short, GPIOMode_TypeDef)
<LI><a href="#[17a87e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defineName::getPin(unsigned char)
</UL>

<P><STRONG><a name="[17a7e84]"></a>doGPIO::doGPIO__sub_object(unsigned char, GPIOMode_TypeDef)</STRONG> (Thumb, 0 bytes, Stack size 96 bytes, dogpio.o(.text), UNUSED)

<P><STRONG><a name="[17a7e48]"></a>doGPIO::High()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dogpio.o(.text), UNUSED)

<P><STRONG><a name="[17a7e0c]"></a>doGPIO::Low()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dogpio.o(.text), UNUSED)

<P><STRONG><a name="[17a7dd0]"></a>doGPIO::Toggle()</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dogpio.o(.text), UNUSED)

<P><STRONG><a name="[17a7d94]"></a>doGPIO::Read()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dogpio.o(.text), UNUSED)

<P><STRONG><a name="[17a7a10]"></a>delay_mS(unsigned long)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, dotime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_mS(unsigned long)
</UL>
<BR>[Calls]<UL><LI><a href="#[17ac45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[fbde0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::delay(unsigned long)
</UL>

<P><STRONG><a name="[17a79d4]"></a>delay_uS(unsigned long)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dotime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17ac45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[17a64bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::delayMicroseconds(unsigned long)
</UL>

<P><STRONG><a name="[17a7998]"></a>pause_mS(unsigned long)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dotime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17a6480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::pause(unsigned long)
</UL>

<P><STRONG><a name="[17a795c]"></a>pause_uS(unsigned long)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dotime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17a6444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::pauseMicroseconds(unsigned long)
</UL>

<P><STRONG><a name="[17a7920]"></a>SystemUptime_mS()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dotime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17ac45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[17a64f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::millis()
</UL>

<P><STRONG><a name="[17a78e4]"></a>SystemUptime_uS()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dotime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17ac45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[17a6570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::micros()
</UL>

<P><STRONG><a name="[17a759c]"></a>doADC::doADC()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, doadc.o(.text), UNUSED)

<P><STRONG><a name="[17a7560]"></a>doADC::doADC__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, doadc.o(.text), UNUSED)

<P><STRONG><a name="[17a7524]"></a>doADC::doADC(ADC_TypeDef*, unsigned char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, doadc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17a6750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::analogRead(unsigned char)
</UL>

<P><STRONG><a name="[17a74e8]"></a>doADC::doADC__sub_object(ADC_TypeDef*, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, doadc.o(.text), UNUSED)

<P><STRONG><a name="[17a74ac]"></a>doADC::Setup(ADC_TypeDef*)</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, doadc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = doADC::Setup(ADC_TypeDef*) &rArr; ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fbd290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[fbd2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[fbd308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[fbd344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[fbd3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[fbd470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[fbd4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[17ae52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fbdf74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit()
</UL>

<P><STRONG><a name="[17a7470]"></a>doADC::StartTemperatureSensor()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, doadc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = doADC::StartTemperatureSensor()
</UL>
<BR>[Calls]<UL><LI><a href="#[fbcd68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TempSensorVrefintCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[fbdf74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit()
</UL>

<P><STRONG><a name="[17a7434]"></a>doADC::Read(unsigned char)</STRONG> (Thumb, 90 bytes, Stack size 96 bytes, doadc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fbcd2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[fbd0ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
<LI><a href="#[fbd164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[fbd254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[17a8244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doGPIO::doGPIO(GPIO_TypeDef*, unsigned short, GPIOMode_TypeDef)
<LI><a href="#[17a87a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defineName::getADCchannel(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[17a6750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::analogRead(unsigned char)
</UL>

<P><STRONG><a name="[17a6f0c]"></a>doEXTI::doEXTI(unsigned char)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, doexti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a6660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::detachInterrupt(unsigned char)
<LI><a href="#[17a669c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::attachInterrupt(unsigned char, void(*)(), EXTITrigger_TypeDef)
</UL>

<P><STRONG><a name="[17a6ed0]"></a>doEXTI::doEXTI__sub_object(unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, doexti.o(.text), UNUSED)

<P><STRONG><a name="[17a6e94]"></a>doEXTI::setMode(EXTIMode_TypeDef)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, doexti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a669c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::attachInterrupt(unsigned char, void(*)(), EXTITrigger_TypeDef)
</UL>

<P><STRONG><a name="[17a6e58]"></a>doEXTI::setTrigger(EXTITrigger_TypeDef)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, doexti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a669c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::attachInterrupt(unsigned char, void(*)(), EXTITrigger_TypeDef)
</UL>

<P><STRONG><a name="[17a6e1c]"></a>doEXTI::setIRQHandler(void(*)())</STRONG> (Thumb, 30 bytes, Stack size 80 bytes, doexti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = doEXTI::setIRQHandler(void(*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[17a87e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defineName::getPin(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[17a669c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::attachInterrupt(unsigned char, void(*)(), EXTITrigger_TypeDef)
</UL>

<P><STRONG><a name="[17a6de0]"></a>doEXTI::Enable()</STRONG> (Thumb, 56 bytes, Stack size 72 bytes, doexti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = doEXTI::Enable() &rArr; GPIO_EXTILineConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[fb8970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[fba338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[17a87e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defineName::getPin(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[17a669c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::attachInterrupt(unsigned char, void(*)(), EXTITrigger_TypeDef)
</UL>

<P><STRONG><a name="[17a6da4]"></a>doEXTI::Disable()</STRONG> (Thumb, 58 bytes, Stack size 72 bytes, doexti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17a87e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defineName::getPin(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[17a6660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::detachInterrupt(unsigned char)
</UL>

<P><STRONG><a name="[17a6d68]"></a>doEXTI::EnableAll()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, doexti.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17a6624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::interrupts()
</UL>

<P><STRONG><a name="[17a6d2c]"></a>doEXTI::DisableAll()</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, doexti.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17a65e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::noInterrupts()
</UL>

<P><STRONG><a name="[17a6804]"></a>compatArduino::pinMode(unsigned char, GPIOMode_TypeDef)</STRONG> (Thumb, 34 bytes, Stack size 96 bytes, compatarduino.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = compatArduino::pinMode(unsigned char, GPIOMode_TypeDef) &rArr; doGPIO::doGPIO(GPIO_TypeDef*, unsigned short, GPIOMode_TypeDef) &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17a8244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doGPIO::doGPIO(GPIO_TypeDef*, unsigned short, GPIOMode_TypeDef)
<LI><a href="#[17a87e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defineName::getPin(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[fbdf38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APM_RC_Class::Init()
<LI><a href="#[1853948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[17a67c8]"></a>compatArduino::digitalWrite(unsigned char, bool)</STRONG> (Thumb, 52 bytes, Stack size 80 bytes, compatarduino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17a87e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defineName::getPin(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[17a65ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::shiftOut(unsigned char, unsigned char, bool, unsigned char)
<LI><a href="#[1853948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin(unsigned char, unsigned char)
<LI><a href="#[18539c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_shift_out(Port, unsigned char)
<LI><a href="#[18539fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_shift_in(Port)
<LI><a href="#[1853a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_nack(Port)
<LI><a href="#[1853a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_ack(Port)
<LI><a href="#[1853ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_get_ack(Port)
<LI><a href="#[1853aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop(Port)
<LI><a href="#[1853b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start(Port)
</UL>

<P><STRONG><a name="[fbde48]"></a>compatArduino::digitalRead(unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 72 bytes, compatarduino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17a87e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defineName::getPin(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[fbe3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterruptPB8()
<LI><a href="#[fbe424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterruptPB9()
<LI><a href="#[17a6534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::pulseIn(unsigned char, bool, unsigned long)
<LI><a href="#[18539fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_shift_in(Port)
<LI><a href="#[1853ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_get_ack(Port)
</UL>

<P><STRONG><a name="[17a678c]"></a>compatArduino::digitalToggle(unsigned char)</STRONG> (Thumb, 60 bytes, Stack size 72 bytes, compatarduino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17a87e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defineName::getPin(unsigned char)
</UL>

<P><STRONG><a name="[17a6750]"></a>compatArduino::analogRead(unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, compatarduino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17a7434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doADC::Read(unsigned char)
<LI><a href="#[17a7524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doADC::doADC(ADC_TypeDef*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[17a6408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::randomSeed(unsigned long)
</UL>

<P><STRONG><a name="[17a6714]"></a>compatArduino::analogWrite(unsigned char, unsigned short)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, compatarduino.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = compatArduino::analogWrite(unsigned char, unsigned short) &rArr; doDAC::Write(unsigned short) &rArr; doGPIO::doGPIO(GPIO_TypeDef*, unsigned short, GPIOMode_TypeDef) &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17a82bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doDAC::Write(unsigned short)
<LI><a href="#[17a8370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doDAC::doDAC(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[fbde84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APM_RC_Class::OutputCh(unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[17a66d8]"></a>compatArduino::analogLastWrite(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, compatarduino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17a8280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doDAC::LastWrite()
<LI><a href="#[17a8370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doDAC::doDAC(unsigned char)
</UL>

<P><STRONG><a name="[17a669c]"></a>compatArduino::attachInterrupt(unsigned char, void(*)(), EXTITrigger_TypeDef)</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, compatarduino.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = compatArduino::attachInterrupt(unsigned char, void(*)(), EXTITrigger_TypeDef) &rArr; doEXTI::Enable() &rArr; GPIO_EXTILineConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[17a6de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doEXTI::Enable()
<LI><a href="#[17a6e1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doEXTI::setIRQHandler(void(*)())
<LI><a href="#[17a6e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doEXTI::setTrigger(EXTITrigger_TypeDef)
<LI><a href="#[17a6e94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doEXTI::setMode(EXTIMode_TypeDef)
<LI><a href="#[17a6f0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doEXTI::doEXTI(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[fbdf38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APM_RC_Class::Init()
</UL>

<P><STRONG><a name="[17a6660]"></a>compatArduino::detachInterrupt(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, compatarduino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17a6da4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doEXTI::Disable()
<LI><a href="#[17a6f0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doEXTI::doEXTI(unsigned char)
</UL>

<P><STRONG><a name="[17a6624]"></a>compatArduino::interrupts()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, compatarduino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17a6d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doEXTI::EnableAll()
</UL>

<P><STRONG><a name="[17a65e8]"></a>compatArduino::noInterrupts()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, compatarduino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17a6d2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doEXTI::DisableAll()
</UL>

<P><STRONG><a name="[17a65ac]"></a>compatArduino::shiftOut(unsigned char, unsigned char, bool, unsigned char)</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, compatarduino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17a67c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::digitalWrite(unsigned char, bool)
</UL>

<P><STRONG><a name="[17a6570]"></a>compatArduino::micros()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, compatarduino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17a78e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemUptime_uS()
</UL>
<BR>[Called By]<UL><LI><a href="#[17a6408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::randomSeed(unsigned long)
<LI><a href="#[17a6534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::pulseIn(unsigned char, bool, unsigned long)
<LI><a href="#[1850f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rxInt()
</UL>

<P><STRONG><a name="[17a6534]"></a>compatArduino::pulseIn(unsigned char, bool, unsigned long)</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, compatarduino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fbde48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::digitalRead(unsigned char)
<LI><a href="#[17a6570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::micros()
</UL>

<P><STRONG><a name="[17a64f8]"></a>compatArduino::millis()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, compatarduino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17a7920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemUptime_mS()
</UL>

<P><STRONG><a name="[fbde0c]"></a>compatArduino::delay(unsigned long)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, compatarduino.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = compatArduino::delay(unsigned long) &rArr; delay_mS(unsigned long)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a7a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_mS(unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[fbe3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>

<P><STRONG><a name="[17a64bc]"></a>compatArduino::delayMicroseconds(unsigned long)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, compatarduino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17a79d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_uS(unsigned long)
</UL>

<P><STRONG><a name="[17a6480]"></a>compatArduino::pause(unsigned long)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, compatarduino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17a7998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause_mS(unsigned long)
</UL>

<P><STRONG><a name="[17a6444]"></a>compatArduino::pauseMicroseconds(unsigned long)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, compatarduino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17a795c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause_uS(unsigned long)
</UL>

<P><STRONG><a name="[17a6408]"></a>compatArduino::randomSeed(unsigned long)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, compatarduino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17a6570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::micros()
<LI><a href="#[17a6750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::analogRead(unsigned char)
<LI><a href="#[184d96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>

<P><STRONG><a name="[17a63cc]"></a>compatArduino::random(long, long)</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, compatarduino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184d8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>

<P><STRONG><a name="[fbddd0]"></a>doSerial::begin(const unsigned long&)</STRONG> (Thumb, 222 bytes, Stack size 120 bytes, doserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = doSerial::begin(const unsigned long&) &rArr; defineName::getUxART(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a4f68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundRobinData&lang;char&rang;::RoundRobinData(char*, int)
<LI><a href="#[17a8244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doGPIO::doGPIO(GPIO_TypeDef*, unsigned short, GPIOMode_TypeDef)
<LI><a href="#[17a8730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defineName::getUxART(unsigned char)
<LI><a href="#[17aa698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[17aa6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[17aa7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[17ae388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[17ae3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[184c940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[184cc4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[fbe3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
<LI><a href="#[17a55bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::doSerial(unsigned char, unsigned long)
</UL>

<P><STRONG><a name="[17a55bc]"></a>doSerial::doSerial(unsigned char, unsigned long)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, doserial.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fbddd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::begin(const unsigned long&)
</UL>

<P><STRONG><a name="[17a5580]"></a>doSerial::doSerial__sub_object(unsigned char, unsigned long)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, doserial.o(.text), UNUSED)

<P><STRONG><a name="[17a5544]"></a>doSerial::doSerial(const unsigned char&)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, doserial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a4950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___14_xduinoInit_cpp
</UL>

<P><STRONG><a name="[17a5508]"></a>doSerial::doSerial__sub_object(const unsigned char&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, doserial.o(.text), UNUSED)

<P><STRONG><a name="[17a54cc]"></a>doSerial::printNoBuffer(char)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, doserial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a5454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::print(char)
</UL>

<P><STRONG><a name="[17a5490]"></a>doSerial::printBuffer(char)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, doserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = doSerial::printBuffer(char) &rArr; RoundRobinData&lang;char&rang;::Put(char) &rArr; RoundRobinData&lang;char&rang;::Next(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[fbe280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundRobinData&lang;char&rang;::Put(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[17a5454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::print(char)
</UL>

<P><STRONG><a name="[17a5454]"></a>doSerial::print(char)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, doserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = doSerial::print(char) &rArr; doSerial::printBuffer(char) &rArr; RoundRobinData&lang;char&rang;::Put(char) &rArr; RoundRobinData&lang;char&rang;::Next(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a5490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::printBuffer(char)
<LI><a href="#[17a54cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::printNoBuffer(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[fbdd58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::print(char*)
</UL>

<P><STRONG><a name="[fbdd58]"></a>doSerial::print(char*)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, doserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = doSerial::print(char*) &rArr; doSerial::print(char) &rArr; doSerial::printBuffer(char) &rArr; RoundRobinData&lang;char&rang;::Put(char) &rArr; RoundRobinData&lang;char&rang;::Next(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a5454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::print(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[fbdd1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::print(int)
<LI><a href="#[fbdd94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::print(const char*)
<LI><a href="#[fbe1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::printf&lang;bool&rang;(char*, T1)
<LI><a href="#[17a5058]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::printf(char*)
<LI><a href="#[17a5364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::print(double)
<LI><a href="#[17a53a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::print(unsigned long)
<LI><a href="#[17a53dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::print(long)
<LI><a href="#[17a5418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::print(unsigned)
</UL>

<P><STRONG><a name="[fbdd1c]"></a>doSerial::print(int)</STRONG> (Thumb, 58 bytes, Stack size 232 bytes, doserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = doSerial::print(int) &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fbdd58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::print(char*)
<LI><a href="#[184d69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1850978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[fbe370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[17a5418]"></a>doSerial::print(unsigned)</STRONG> (Thumb, 58 bytes, Stack size 232 bytes, doserial.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fbdd58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::print(char*)
<LI><a href="#[184d69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1850978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>

<P><STRONG><a name="[17a53dc]"></a>doSerial::print(long)</STRONG> (Thumb, 58 bytes, Stack size 232 bytes, doserial.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fbdd58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::print(char*)
<LI><a href="#[184d69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1850978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>

<P><STRONG><a name="[17a53a0]"></a>doSerial::print(unsigned long)</STRONG> (Thumb, 58 bytes, Stack size 232 bytes, doserial.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fbdd58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::print(char*)
<LI><a href="#[184d69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1850978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>

<P><STRONG><a name="[17a5364]"></a>doSerial::print(double)</STRONG> (Thumb, 76 bytes, Stack size 272 bytes, doserial.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fbdd58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::print(char*)
<LI><a href="#[184d69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1850978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>

<P><STRONG><a name="[fbdd94]"></a>doSerial::print(const char*)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, doserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = doSerial::print(const char*) &rArr; doSerial::print(char*) &rArr; doSerial::print(char) &rArr; doSerial::printBuffer(char) &rArr; RoundRobinData&lang;char&rang;::Put(char) &rArr; RoundRobinData&lang;char&rang;::Next(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[fbdd58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::print(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[fbe370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
<LI><a href="#[fbe3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>

<P><STRONG><a name="[17a5328]"></a>doSerial::readNoBuffer()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, doserial.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17a52b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::read()
</UL>

<P><STRONG><a name="[17a52ec]"></a>doSerial::readBuffer()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, doserial.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fbe2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundRobinData&lang;char&rang;::Get()
</UL>
<BR>[Called By]<UL><LI><a href="#[17a52b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::read()
</UL>

<P><STRONG><a name="[17a52b0]"></a>doSerial::read()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, doserial.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17a52ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::readBuffer()
<LI><a href="#[17a5328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::readNoBuffer()
</UL>

<P><STRONG><a name="[17a5274]"></a>doSerial::PutRxBuffer(char)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, doserial.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fbe280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundRobinData&lang;char&rang;::Put(char)
</UL>

<P><STRONG><a name="[17a5238]"></a>doSerial::GetTxBuffer(char)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, doserial.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fbe2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundRobinData&lang;char&rang;::Get()
</UL>

<P><STRONG><a name="[17a51fc]"></a>doSerial::getData()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, doserial.o(.text), UNUSED)

<P><STRONG><a name="[17a51c0]"></a>doSerial::availableNoBuffer()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, doserial.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17a5148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::available()
</UL>

<P><STRONG><a name="[17a5184]"></a>doSerial::availableBuffer()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, doserial.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fbe208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundRobinData&lang;char&rang;::notEmpty()
</UL>
<BR>[Called By]<UL><LI><a href="#[17a5148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::available()
</UL>

<P><STRONG><a name="[17a5148]"></a>doSerial::available()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, doserial.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17a5184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::availableBuffer()
<LI><a href="#[17a51c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::availableNoBuffer()
</UL>

<P><STRONG><a name="[17a510c]"></a>doSerial::setRxBufferSize(unsigned long)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, doserial.o(.text), UNUSED)

<P><STRONG><a name="[17a50d0]"></a>doSerial::setTxBufferSize(unsigned long)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, doserial.o(.text), UNUSED)

<P><STRONG><a name="[17a5094]"></a>doSerial::flush()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, doserial.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17a4fa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundRobinData&lang;char&rang;::Reset()
</UL>

<P><STRONG><a name="[17a5058]"></a>doSerial::printf(char*)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, doserial.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fbdd58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::print(char*)
</UL>

<P><STRONG><a name="[17a501c]"></a>doSerial::~doSerial()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, doserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = doSerial::~doSerial() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[184caa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[184cd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xduinoinit.o(.text)
</UL>
<P><STRONG><a name="[17a4fe0]"></a>doSerial::~doSerial__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, doserial.o(.text), UNUSED)

<P><STRONG><a name="[17a3a8c]"></a>RCC_Configuration()</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, xduinoinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_Configuration() &rArr; RCC_WaitForHSEStartUp &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[fb9e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrefetchBufferCmd
<LI><a href="#[fb9e88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[17ae5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[17ae61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[17ae658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[17ae694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[17ae6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[17ae70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[17ae748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[17ae7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[17ae838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[17ae874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[17ae8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[fbdf74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit()
</UL>

<P><STRONG><a name="[17a3a50]"></a>NVIC_Configuration()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, xduinoinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_Configuration()
</UL>
<BR>[Calls]<UL><LI><a href="#[fb6d50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
</UL>
<BR>[Called By]<UL><LI><a href="#[fbdf74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit()
</UL>

<P><STRONG><a name="[17a3a14]"></a>SysTick_Init()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, xduinoinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Init()
</UL>
<BR>[Calls]<UL><LI><a href="#[17ac498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_ITConfig
<LI><a href="#[17ac4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CounterCmd
<LI><a href="#[17ac510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_SetReload
<LI><a href="#[17ac54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fbdf74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit()
</UL>

<P><STRONG><a name="[17a39d8]"></a>NVIC_Init_Interrupt()</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, xduinoinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = NVIC_Init_Interrupt() &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fb70d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[fb7110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fbdf74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit()
</UL>

<P><STRONG><a name="[fbdf74]"></a>doInit()</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, xduinoinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = doInit() &rArr; NVIC_Init_Interrupt() &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fbb418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_DeInit
<LI><a href="#[17a39d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init_Interrupt()
<LI><a href="#[17a3a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init()
<LI><a href="#[17a3a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration()
<LI><a href="#[17a3a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration()
<LI><a href="#[17a7470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doADC::StartTemperatureSensor()
<LI><a href="#[17a74ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doADC::Setup(ADC_TypeDef*)
<LI><a href="#[17a82f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doDAC::Setup(unsigned long)
<LI><a href="#[17ae3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[17ae52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fbe334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1853b64]"></a>I2C_DELAY()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wire.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18539c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_shift_out(Port, unsigned char)
<LI><a href="#[18539fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_shift_in(Port)
<LI><a href="#[1853a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_nack(Port)
<LI><a href="#[1853a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_ack(Port)
<LI><a href="#[1853ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_get_ack(Port)
<LI><a href="#[1853aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop(Port)
<LI><a href="#[1853b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start(Port)
</UL>

<P><STRONG><a name="[1853b28]"></a>i2c_start(Port)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wire.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17a67c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::digitalWrite(unsigned char, bool)
<LI><a href="#[1853b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DELAY()
</UL>
<BR>[Called By]<UL><LI><a href="#[1854de8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::endTransmission()
<LI><a href="#[1854e60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::readOneByte(unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[1853aec]"></a>i2c_stop(Port)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wire.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17a67c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::digitalWrite(unsigned char, bool)
<LI><a href="#[1853b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DELAY()
</UL>
<BR>[Called By]<UL><LI><a href="#[1854de8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::endTransmission()
<LI><a href="#[1854e60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::readOneByte(unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[1853ab0]"></a>i2c_get_ack(Port)</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, wire.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fbde48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::digitalRead(unsigned char)
<LI><a href="#[17a67c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::digitalWrite(unsigned char, bool)
<LI><a href="#[1853b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DELAY()
</UL>
<BR>[Called By]<UL><LI><a href="#[18538d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::writeOneByte(unsigned char)
<LI><a href="#[1854de8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::endTransmission()
<LI><a href="#[1854e60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::readOneByte(unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[1853a74]"></a>i2c_send_ack(Port)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, wire.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17a67c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::digitalWrite(unsigned char, bool)
<LI><a href="#[1853b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DELAY()
</UL>

<P><STRONG><a name="[1853a38]"></a>i2c_send_nack(Port)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wire.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17a67c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::digitalWrite(unsigned char, bool)
<LI><a href="#[1853b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DELAY()
</UL>
<BR>[Called By]<UL><LI><a href="#[1854e60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::readOneByte(unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[18539fc]"></a>i2c_shift_in(Port)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, wire.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fbde48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::digitalRead(unsigned char)
<LI><a href="#[17a67c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::digitalWrite(unsigned char, bool)
<LI><a href="#[1853b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DELAY()
</UL>
<BR>[Called By]<UL><LI><a href="#[1854e60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::readOneByte(unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[18539c0]"></a>i2c_shift_out(Port, unsigned char)</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, wire.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17a67c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::digitalWrite(unsigned char, bool)
<LI><a href="#[1853b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DELAY()
</UL>
<BR>[Called By]<UL><LI><a href="#[18538d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::writeOneByte(unsigned char)
<LI><a href="#[1854de8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::endTransmission()
<LI><a href="#[1854e60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::readOneByte(unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[17a399c]"></a>TwoWire::TwoWire()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, wire.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a4950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___14_xduinoInit_cpp
</UL>

<P><STRONG><a name="[1853984]"></a>TwoWire::TwoWire__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, wire.o(.text), UNUSED)

<P><STRONG><a name="[1853948]"></a>TwoWire::begin(unsigned char, unsigned char)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, wire.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17a67c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::digitalWrite(unsigned char, bool)
<LI><a href="#[17a6804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::pinMode(unsigned char, GPIOMode_TypeDef)
</UL>
<BR>[Called By]<UL><LI><a href="#[1854cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin()
</UL>

<P><STRONG><a name="[1854cf8]"></a>TwoWire::begin()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wire.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1853948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[185390c]"></a>TwoWire::beginTransmission(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, wire.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1854dac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::beginTransmission(int)
</UL>

<P><STRONG><a name="[1854dac]"></a>TwoWire::beginTransmission(int)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wire.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185390c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::beginTransmission(unsigned char)
</UL>

<P><STRONG><a name="[18538d0]"></a>TwoWire::writeOneByte(unsigned char)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, wire.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18539c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_shift_out(Port, unsigned char)
<LI><a href="#[1853ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_get_ack(Port)
</UL>
<BR>[Called By]<UL><LI><a href="#[1854de8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::endTransmission()
</UL>

<P><STRONG><a name="[1854de8]"></a>TwoWire::endTransmission()</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, wire.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18538d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::writeOneByte(unsigned char)
<LI><a href="#[18539c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_shift_out(Port, unsigned char)
<LI><a href="#[1853ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_get_ack(Port)
<LI><a href="#[1853aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop(Port)
<LI><a href="#[1853b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start(Port)
</UL>

<P><STRONG><a name="[1854e60]"></a>TwoWire::readOneByte(unsigned char, unsigned char*)</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, wire.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18539c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_shift_out(Port, unsigned char)
<LI><a href="#[18539fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_shift_in(Port)
<LI><a href="#[1853a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_nack(Port)
<LI><a href="#[1853ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_get_ack(Port)
<LI><a href="#[1853aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop(Port)
<LI><a href="#[1853b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start(Port)
</UL>
<BR>[Called By]<UL><LI><a href="#[1853894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::requestFrom(unsigned char, int)
</UL>

<P><STRONG><a name="[1853894]"></a>TwoWire::requestFrom(unsigned char, int)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, wire.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1854e60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::readOneByte(unsigned char, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1854e24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::requestFrom(int, int)
</UL>

<P><STRONG><a name="[1854e24]"></a>TwoWire::requestFrom(int, int)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wire.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1853894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::requestFrom(unsigned char, int)
</UL>

<P><STRONG><a name="[1854d70]"></a>TwoWire::send(unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, wire.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18537e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::send(char*)
<LI><a href="#[1853858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::send(unsigned char*, int)
<LI><a href="#[1854d34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::send(int)
</UL>

<P><STRONG><a name="[1853858]"></a>TwoWire::send(unsigned char*, int)</STRONG> (Thumb, 30 bytes, Stack size 20 bytes, wire.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1854d70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::send(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[185381c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::send(int*, int)
</UL>

<P><STRONG><a name="[1854d34]"></a>TwoWire::send(int)</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, wire.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1854d70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::send(unsigned char)
</UL>

<P><STRONG><a name="[185381c]"></a>TwoWire::send(int*, int)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wire.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1853858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::send(unsigned char*, int)
</UL>

<P><STRONG><a name="[18537e0]"></a>TwoWire::send(char*)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wire.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1854d70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::send(unsigned char)
</UL>

<P><STRONG><a name="[1854c80]"></a>TwoWire::available()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wire.o(.text), UNUSED)

<P><STRONG><a name="[1854cbc]"></a>TwoWire::receive()</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, wire.o(.text), UNUSED)

<P><STRONG><a name="[1850f18]"></a>rxInt()</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, apm_rc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17a6570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::micros()
</UL>

<P><STRONG><a name="[1850edc]"></a>APM_RC_Class::APM_RC_Class()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, apm_rc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1851f08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_APM_RC_cpp
</UL>

<P><STRONG><a name="[1850ea0]"></a>APM_RC_Class::APM_RC_Class__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, apm_rc.o(.text), UNUSED)

<P><STRONG><a name="[fbdf38]"></a>APM_RC_Class::Init()</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, apm_rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = APM_RC_Class::Init() &rArr; compatArduino::pinMode(unsigned char, GPIOMode_TypeDef) &rArr; doGPIO::doGPIO(GPIO_TypeDef*, unsigned short, GPIOMode_TypeDef) &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17a669c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::attachInterrupt(unsigned char, void(*)(), EXTITrigger_TypeDef)
<LI><a href="#[17a6804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::pinMode(unsigned char, GPIOMode_TypeDef)
</UL>
<BR>[Called By]<UL><LI><a href="#[fbe3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>

<P><STRONG><a name="[fbde84]"></a>APM_RC_Class::OutputCh(unsigned char, unsigned short)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, apm_rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = APM_RC_Class::OutputCh(unsigned char, unsigned short) &rArr; compatArduino::analogWrite(unsigned char, unsigned short) &rArr; doDAC::Write(unsigned short) &rArr; doGPIO::doGPIO(GPIO_TypeDef*, unsigned short, GPIOMode_TypeDef) &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17a6714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::analogWrite(unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[fbe370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[fbdefc]"></a>APM_RC_Class::InputCh(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, apm_rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = APM_RC_Class::InputCh(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[fbe370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[fbdec0]"></a>APM_RC_Class::GetState()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, apm_rc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fbe370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[1850e64]"></a>APM_RC_Class::Force_Out0_Out1()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, apm_rc.o(.text), UNUSED)

<P><STRONG><a name="[1850e28]"></a>APM_RC_Class::Force_Out2_Out3()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, apm_rc.o(.text), UNUSED)

<P><STRONG><a name="[1850dec]"></a>APM_RC_Class::Force_Out6_Out7()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, apm_rc.o(.text), UNUSED)

<P><STRONG><a name="[1850978]"></a>__2snprintf</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, noretval__2snprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19b7130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[19b725c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[fbdd1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::print(int)
<LI><a href="#[fbe1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::printf&lang;bool&rang;(char*, T1)
<LI><a href="#[17a5364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::print(double)
<LI><a href="#[17a53a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::print(unsigned long)
<LI><a href="#[17a53dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::print(long)
<LI><a href="#[17a5418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::print(unsigned)
</UL>

<P><STRONG><a name="[1850798]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[18501f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[1850540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[19b1a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[19b7388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[19b7784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[19b78ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[185075c]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[18501f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[1850540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[19b1a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[19b7388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[19b7784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[19b78ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[185066c]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18503d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1850630]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[184f988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[184ff28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[18503d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1850540]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[185075c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1850798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[19b6f50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[18503d8]"></a>_printf_int_dec</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1850630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[185066c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
<LI><a href="#[19b6974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[19b78ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[184e074]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[184e128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[184e1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[18501f8]"></a>_printf_wctomb</STRONG> (Thumb, 180 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[185075c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1850798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[19b6aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[19b6dac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[184ff28]"></a>_printf_int_oct</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, _printf_oct_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1850630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[19b78ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[184e2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[184feec]"></a>_printf_longlong_oct</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_oct_int.o(.text), UNUSED)

<P><STRONG><a name="[184f988]"></a>_printf_int_hex</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1850630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[19b78ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[184e3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[184f94c]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[184e560]"></a>__printf</STRONG> (Thumb, 412 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[184dcf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[19b725c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[184d96c]"></a>srand</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[17a6408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::randomSeed(unsigned long)
<LI><a href="#[184d930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[184d930]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[184d96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[19b5df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[184d8f4]"></a>rand</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, rand.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17a63cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compatArduino::random(long, long)
</UL>

<P><STRONG><a name="[184d69c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[fbdd1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::print(int)
<LI><a href="#[fbe1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::printf&lang;bool&rang;(char*, T1)
<LI><a href="#[17a5364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::print(double)
<LI><a href="#[17a53a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::print(unsigned long)
<LI><a href="#[17a53dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::print(long)
<LI><a href="#[17a5418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::print(unsigned)
</UL>

<P><STRONG><a name="[184d660]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[184d624]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[184d5e8]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[184d4f8]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[184d4bc]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[184d480]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[184cf1c]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[19b55c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[1848cc8]"></a>__rt_new_handler_addr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_new_handler_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[184c940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[1848a34]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[184c79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[19b3ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[1848638]"></a>malloc</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[19b25f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[19b2ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[184c79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[184c940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[19ac528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[19ad680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[18484d0]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[19b2ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[184caa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[19af570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[19b3ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[19b78ec]"></a>_printf_int_common</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[185075c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1850798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[184f988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[184ff28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[18503d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[19b77c0]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[19b7784]"></a>_printf_fp_dec_real</STRONG> (Thumb, 626 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[185075c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1850798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[19afc78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[19b1a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[19b2888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[19b6974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[19b77fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[1849484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[19b7388]"></a>_printf_fp_hex_real</STRONG> (Thumb, 762 bytes, Stack size 88 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[185075c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1850798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[19afc78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[19b1a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[1849358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[19b725c]"></a>_printf_char_common</STRONG> (Thumb, 34 bytes, Stack size 72 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[184e560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1850978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>

<P><STRONG><a name="[19b7130]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1850978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>

<P><STRONG><a name="[19b7040]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> noretval__2snprintf.o(.text)
</UL>
<P><STRONG><a name="[19b6f50]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1850540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[19b6ed8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[19b6f14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[19b6f14]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[19b6f50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[184e4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[19b6ed8]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19b6f50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[19b6dac]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[18501f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[19b6d34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[19b6d70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[19b6d70]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[19b6dac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[184dc00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[19b6d34]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19b6dac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[19b6aa0]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[19b2d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[18501f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[19b6974]"></a>__rt_udiv10</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18503d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[19b7784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[19b464c]"></a>__default_new_handler()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arm_newhandler_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = __default_new_handler() &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[19b04ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> new.o(i._Znwj)
</UL>
<P><STRONG><a name="[19b35e4]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[19b35a8]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19afa5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[19b356c]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[19b2d38]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[19b2888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[19b6aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[19b2ae0]"></a>__rt_heap_descriptor</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18484d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1848638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[19b257c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[19b2888]"></a>__rt_locale</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19b2d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[19b5d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[19b7784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[19b2798]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[19b275c]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[19b266c]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[19b2630]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[19b25f4]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[19af570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[1848638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[19b25b8]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19aedf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[19b257c]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[19aedf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[19af570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[19b2144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_DescSize
<LI><a href="#[19b2180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[19b2ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[19b5f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[19b2180]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19b257c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[19b2144]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19b257c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[19b1b68]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[19b77fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[19b1a78]"></a>_printf_fp_infnan</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[185075c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1850798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[19b7388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[19b7784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[19b17e4]"></a>_btod_etento</STRONG> (Thumb, 206 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[19b1064]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[19b10dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[19b77fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[19b04ac]"></a>std::terminate()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, arm_exceptions_terminate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[19ad680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[19aef94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[19b464c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
</UL>

<P><STRONG><a name="[19afa5c]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[17a993c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[19b35a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[19b2e64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[19af570]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[18484d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[19b257c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[19b25f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[19af0fc]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19ad0e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[19b3080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[19aef94]"></a>abort</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[19aaf98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
<LI><a href="#[19ac870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[19ad2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[19ad680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[19ad6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_terminate_handler()
<LI><a href="#[19b04ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[19aedf0]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[19ac654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[19ac960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[19b257c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[19b25b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[19aeb5c]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19af264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[19b0d58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[19ad680]"></a>__cxa_get_globals</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1848638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[19ac528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[19acca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr
<LI><a href="#[19aef94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[19b04ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[19ad2c0]"></a>_sys_exit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19ac12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[19ac960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[19aef94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[19ad1d0]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sys_exit.o(.text)
</UL>
<P><STRONG><a name="[19ad194]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[19acca8]"></a>__rt_eh_globals_addr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_eh_globals_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19ad680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[19ac960]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19ad2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[19ac870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[19aedf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[19ac870]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[19ab934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[19ac960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[19aef94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[19ac654]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[19aba60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[19aedf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[19ac528]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1848638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[19ad680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[19ac4ec]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[19ac4b0]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[19abe98]"></a>__rt_fp_status_addr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_fp_status_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19ac3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[19aba60]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[19ab844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[19ab934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[19ac654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[19ab934]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[19aba60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[19ac870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[19ab844]"></a>_ttywrch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[19aba60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[19b1244]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[19b11cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[19b77fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[19b1208]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[19b11cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[19b11cc]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[19b1208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[19b1244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[19b1190]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[19b10dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[19b1118]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[19b1064]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[19b10dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[19b10dc]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[19b1118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[19b1190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[19b17e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[19b77fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[19b1064]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[19b0fec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[19b1118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[19b17e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[19b77fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[19b0fec]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[19b1064]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[fbe2f8]"></a>UxARTx_IRQ_Function(USART_TypeDef*, doSerial*)</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, main.o(i._Z19UxARTx_IRQ_FunctionP13USART_TypeDefP8doSerial))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UxARTx_IRQ_Function(USART_TypeDef*, doSerial*) &rArr; RoundRobinData&lang;char&rang;::Put(char) &rArr; RoundRobinData&lang;char&rang;::Next(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[fbe208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundRobinData&lang;char&rang;::notEmpty()
<LI><a href="#[fbe280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundRobinData&lang;char&rang;::Put(char)
<LI><a href="#[fbe2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundRobinData&lang;char&rang;::Get()
</UL>
<BR>[Called By]<UL><LI><a href="#[fc1ebc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQ_Function
<LI><a href="#[fc1ef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQ_Function
<LI><a href="#[fc1f34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQ_Function
<LI><a href="#[fc1f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQ_Function
<LI><a href="#[fc1fac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQ_Function
</UL>

<P><STRONG><a name="[184cd78]"></a>operator delete[] (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_del.o(i._ZdaPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[184caa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[17a501c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::~doSerial()
</UL>

<P><STRONG><a name="[184caa8]"></a>operator delete (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, delete.o(i._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[18484d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[17a501c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::~doSerial()
<LI><a href="#[184cd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>

<P><STRONG><a name="[184cc4c]"></a>operator new[] (unsigned)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_new.o(i._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[184c940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[fbddd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::begin(const unsigned long&)
</UL>

<P><STRONG><a name="[184c940]"></a>operator new(unsigned)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, new.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1848638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1848cc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[fbddd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::begin(const unsigned long&)
<LI><a href="#[184cc4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>

<P><STRONG><a name="[19afc78]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[19b7388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[19b7784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[184c79c]"></a>__aeabi_atexit</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, aeabi_atexit.o(i.__aeabi_atexit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1848638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1848a34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[17a4950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___14_xduinoInit_cpp
</UL>

<P><STRONG><a name="[19b3ff8]"></a>__cxa_finalize</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, cxa_finalize.o(i.__cxa_finalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[18484d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1848a34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[19b4dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_1
</UL>

<P><STRONG><a name="[19b0d58]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[19aeb5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[19b5bdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[19af264]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[19aeb5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[19b5ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[fbe2bc]"></a>RoundRobinData&lang;char&rang;::Get()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, main.o(t._ZN14RoundRobinDataIcE3GetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RoundRobinData&lang;char&rang;::Get() &rArr; RoundRobinData&lang;char&rang;::Next(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[fbe244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundRobinData&lang;char&rang;::Next(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[fbe2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UxARTx_IRQ_Function(USART_TypeDef*, doSerial*)
<LI><a href="#[17a5238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::GetTxBuffer(char)
<LI><a href="#[17a52ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::readBuffer()
</UL>

<P><STRONG><a name="[fbe280]"></a>RoundRobinData&lang;char&rang;::Put(char)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, main.o(t._ZN14RoundRobinDataIcE3PutEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RoundRobinData&lang;char&rang;::Put(char) &rArr; RoundRobinData&lang;char&rang;::Next(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[fbe244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundRobinData&lang;char&rang;::Next(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[fbe2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UxARTx_IRQ_Function(USART_TypeDef*, doSerial*)
<LI><a href="#[17a5274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::PutRxBuffer(char)
<LI><a href="#[17a5490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::printBuffer(char)
</UL>

<P><STRONG><a name="[fbe244]"></a>RoundRobinData&lang;char&rang;::Next(char*)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(t._ZN14RoundRobinDataIcE4NextEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RoundRobinData&lang;char&rang;::Next(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[fbe280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundRobinData&lang;char&rang;::Put(char)
<LI><a href="#[fbe2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundRobinData&lang;char&rang;::Get()
</UL>

<P><STRONG><a name="[17a4fa4]"></a>RoundRobinData&lang;char&rang;::Reset()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, doserial.o(t._ZN14RoundRobinDataIcE5ResetEv), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17a5094]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::flush()
</UL>

<P><STRONG><a name="[fbe208]"></a>RoundRobinData&lang;char&rang;::notEmpty()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(t._ZN14RoundRobinDataIcE8notEmptyEv))
<BR><BR>[Called By]<UL><LI><a href="#[fbe2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UxARTx_IRQ_Function(USART_TypeDef*, doSerial*)
<LI><a href="#[17a5184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::availableBuffer()
</UL>

<P><STRONG><a name="[17a4f68]"></a>RoundRobinData&lang;char&rang;::RoundRobinData(char*, int)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, doserial.o(t._ZN14RoundRobinDataIcEC1EPci))
<BR><BR>[Called By]<UL><LI><a href="#[fbddd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::begin(const unsigned long&)
</UL>

<P><STRONG><a name="[17a4f2c]"></a>RoundRobinData&lang;char&rang;::RoundRobinData__sub_object(char*, int)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, doserial.o(t._ZN14RoundRobinDataIcEC1EPci), UNUSED)

<P><STRONG><a name="[fbe1cc]"></a>doSerial::printf&lang;bool&rang;(char*, T1)</STRONG> (Thumb, 56 bytes, Stack size 232 bytes, main.o(t._ZN8doSerial6printfIbEEvPcT_), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fbdd58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::print(char*)
<LI><a href="#[184d69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1850978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[fbe3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterruptPB8()
<LI><a href="#[fbe424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterruptPB9()
</UL>

<P><STRONG><a name="[19ac3c0]"></a>_fp_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[19abe98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_fp_status_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[19ae418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[19ac384]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1849484]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[19b7784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[184de58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[184df0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[184dfc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[1849358]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[19b7388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[184dda4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[19b3788]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, usenofp.o(x$fpl$usenofp), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[fb9fb4]"></a>delay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fb9d20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[17a4950]"></a>__sti___14_xduinoInit_cpp</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, xduinoinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __sti___14_xduinoInit_cpp &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[17a399c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::TwoWire()
<LI><a href="#[17a5544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSerial::doSerial(const unsigned char&)
<LI><a href="#[184c79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xduinoinit.o(.init_array)
</UL>
<P><STRONG><a name="[1851f08]"></a>__sti___10_APM_RC_cpp</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, apm_rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __sti___10_APM_RC_cpp
</UL>
<BR>[Calls]<UL><LI><a href="#[1850edc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APM_RC_Class::APM_RC_Class()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> apm_rc.o(.init_array)
</UL>
<P><STRONG><a name="[19b77fc]"></a>_fp_digits</STRONG> (Thumb, 492 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[19b1064]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[19b10dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[19b1244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[19b17e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[19b1b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[19b7784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[19b7298]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[19ad6bc]"></a>__default_terminate_handler()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __default_terminate_handler() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[19aef94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
